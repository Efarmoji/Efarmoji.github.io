# uril.py

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time
import os
import urllib.parse

def translate_sentences(sentences, output_csv='translated_sentences.csv', source_lang='ru', target_lang='en'):
    # Load already translated sentences
    already_translated = set()
    if os.path.exists(output_csv):
        df_existing = pd.read_csv(output_csv)
        already_translated = set(df_existing['sentence'].dropna().tolist())

    # Set up headless browser
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    driver = webdriver.Chrome(options=options)

    new_translations = []

    for sentence in sentences:
        if sentence in already_translated:
            print(f"‚è≠Ô∏è Skipping (already translated): {sentence}")
            continue

        try:
            print(f"üåê Translating: {sentence}")
            encoded_sentence = urllib.parse.quote(sentence)
            url = f"https://lingva.ml/{source_lang}/{target_lang}/{encoded_sentence}"
            driver.get(url)

            wait = WebDriverWait(driver, 10)
            result_elem = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'div.chakra-stack div.translation')
            ))

            translation = result_elem.text.strip()
            print(f"‚úÖ {translation}")
            new_translations.append({'sentence': sentence, 'translation': translation})

        except Exception as e:
            print(f"‚ùå Error translating sentence: {e}")
            new_translations.append({'sentence': sentence, 'translation': 'ERROR'})

        time.sleep(2)

    driver.quit()

    # Save to CSV
    if new_translations:
        df_new = pd.DataFrame(new_translations)
        if os.path.exists(output_csv):
            df_new.to_csv(output_csv, mode='a', header=False, index=False)
        else:
            df_new.to_csv(output_csv, index=False)

        print(f"\nüìÅ Saved {len(df_new)} new translations to {output_csv}")
    else:
        print("\nüì≠ No new translations were needed.")

# Example usage
if __name__ == "__main__":
    sample_sentences = [
        "–£ –º–µ–Ω—è –±–æ–ª—å—à–∞—è —Å–µ–º—å—è –∏–∑ —à–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫: —è, –º–∞–º–∞, –ø–∞–ø–∞, —Å—Ç–∞—Ä—à–∞—è —Å–µ—Å—Ç—Ä–∞, –±–∞–±—É—à–∫–∞ –∏ –¥–µ–¥—É—à–∫–∞. –ú—ã –∂–∏–≤–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —Å —Å–æ–±–∞–∫–æ–π –ë–∏–º–æ–º –∏ –∫–æ—à–∫–æ–π –ú—É—Ä–∫–æ–π –≤ –±–æ–ª—å—à–æ–º –¥–æ–º–µ –≤ –¥–µ—Ä–µ–≤–Ω–µ. –ú–æ–π –ø–∞–ø–∞ –≤—Å—Ç–∞–µ—Ç —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–º—É —Ä–∞–Ω–æ –Ω–∞ —Ä–∞–±–æ—Ç—É. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–∫—Ç–æ—Ä–æ–º. –û–±—ã—á–Ω–æ –±–∞–±—É—à–∫–∞ –≥–æ—Ç–æ–≤–∏—Ç –Ω–∞–º –∑–∞–≤—Ç—Ä–∞–∫. –Ø –æ–±–æ–∂–∞—é –æ–≤—Å—è–Ω—É—é –∫–∞—à—É, –∞ –º–æ—è —Å–µ—Å—Ç—Ä–∞ –ê–Ω—è ‚Äì –±–ª–∏–Ω—ã.",
        "–ü–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –∏ –∏–¥–µ–º –≤ —à–∫–æ–ª—É. –ú–æ—è —Å–µ—Å—Ç—Ä–∞ —É—á–∏—Ç—Å—è –≤ –ø—è—Ç–æ–º –∫–ª–∞—Å—Å–µ, –∞ —è ‚Äì –≤–æ –≤—Ç–æ—Ä–æ–º. –ú—ã –ª—é–±–∏–º —É—á–∏—Ç—å—Å—è –∏ –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —è –ª—é–±–ª—é –≥–µ–æ–≥—Ä–∞—Ñ–∏—é. –ö–æ–≥–¥–∞ –º—ã –ø—Ä–∏—Ö–æ–¥–∏–º –¥–æ–º–æ–π –∏–∑ —à–∫–æ–ª—ã, –º—ã —Å–º–æ—Ç—Ä–∏–º —Ç–µ–ª–µ–≤–∏–∑–æ—Ä, –∞ –ø–æ—Ç–æ–º —É–∂–∏–Ω–∞–µ–º –∏ –¥–µ–ª–∞–µ–º —É—Ä–æ–∫–∏. –ò–Ω–æ–≥–¥–∞ –º—ã –ø–æ–º–æ–≥–∞–µ–º –±–∞–±—É—à–∫–µ –∏ –º–∞–º–µ –≤ –æ–≥–æ—Ä–æ–¥–µ, –≥–¥–µ –æ–Ω–∏ –≤—ã—Ä–∞—â–∏–≤–∞—é—Ç –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã."
    ]
    translate_sentences(sample_sentences)
